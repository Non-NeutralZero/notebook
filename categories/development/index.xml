<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Digital Notebook NonNeutralZero</title><link>https://non-neutralzero.github.io/notebook/categories/development/</link><description>Recent content in Development on Digital Notebook NonNeutralZero</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 02 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://non-neutralzero.github.io/notebook/categories/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Databricks and OOP, do they match ?</title><link>https://non-neutralzero.github.io/notebook/posts/databricks-vs-oop/</link><pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate><guid>https://non-neutralzero.github.io/notebook/posts/databricks-vs-oop/</guid><description>&lt;h2 id="context">
 Context
 &lt;a class="anchor" href="#context">#&lt;/a>
&lt;/h2>
&lt;p>Databricks and Apache Spark are often used in data engineering, data science, and machine learning workflows. Their APIs are designed around &lt;strong>distributed data processing&lt;/strong> (RDDs, DataFrames, Datasets). The question arises: &lt;em>does Object-Oriented Programming (OOP) fit into this paradigm, or do we need a different style?&lt;/em>&lt;/p>
&lt;hr>
&lt;h2 id="databricks-programming-model-vs-oop">
 Databricks Programming Model vs OOP
 &lt;a class="anchor" href="#databricks-programming-model-vs-oop">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Spark API&lt;/strong>: functional and declarative. You express transformations (&lt;code>map&lt;/code>, &lt;code>filter&lt;/code>, &lt;code>select&lt;/code>) on immutable distributed datasets.&lt;/li>
&lt;li>&lt;strong>OOP style&lt;/strong>: encapsulates data + behaviour inside classes, often with mutable state.&lt;/li>
&lt;/ul>
&lt;h3 id="where-they-match">
 Where They Match
 &lt;a class="anchor" href="#where-they-match">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Encapsulation of business logic&lt;/strong>: Wrapping Spark transformations inside reusable classes (e.g., &lt;code>DataCleaner&lt;/code>, &lt;code>FeatureEngineer&lt;/code>) helps modularize pipelines.&lt;/li>
&lt;li>&lt;strong>Abstractions for teams&lt;/strong>: Teams can expose high-level methods (&lt;code>.transform(df)&lt;/code>) instead of low-level Spark calls.&lt;/li>
&lt;li>&lt;strong>Testing &amp;amp; reusability&lt;/strong>: OOP structures allow dependency injection, mock data, and unit testing.&lt;/li>
&lt;/ul>
&lt;h3 id="where-they-clash">
 Where They Clash
 &lt;a class="anchor" href="#where-they-clash">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Statefulness&lt;/strong>: Spark’s lazy evaluation and immutable DataFrames do not align with mutable OOP state.&lt;/li>
&lt;li>&lt;strong>Serialization&lt;/strong>: Classes with methods that capture external state may not serialize well when Spark ships code to executors.&lt;/li>
&lt;li>&lt;strong>Functional preference&lt;/strong>: Many Spark best practices push towards functional patterns (pure functions, stateless transformations).&lt;/li>
&lt;/ul>
&lt;p>Note on statefulness: In &lt;em>Learning Spark&lt;/em>, Holden Karau makes distinction between stateless and stateful processing and emphazizes it. Stateless transformations are preferred, but spark also provides patterns for stateful processing, particularly in streaming contexts. e.g., &lt;code>updateStateByKey&lt;/code>, windowing, watermarking, and event-time state management.&lt;/p></description></item><item><title>Databricks Naming Conventions</title><link>https://non-neutralzero.github.io/notebook/posts/databricks-naming-convention/</link><pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate><guid>https://non-neutralzero.github.io/notebook/posts/databricks-naming-convention/</guid><description>&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>Consistent naming across &lt;strong>env (dev, test, prod)&lt;/strong>, &lt;strong>layers (bronze/silver/gold)&lt;/strong>, and &lt;strong>domains&lt;/strong> is critical in Databricks. It prevents confusion, enforces governance, and supports automation with Unity Catalog and Delta Lake.&lt;/p>
&lt;hr>
&lt;h2 id="general-best-practices">
 General Best Practices
 &lt;a class="anchor" href="#general-best-practices">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Separate dev / test / prod workspaces.&lt;/li>
&lt;li>Apply RBAC + Unity Catalog.&lt;/li>
&lt;li>Use modular notebooks; reuse with &lt;code>%run&lt;/code>.&lt;/li>
&lt;li>Version control all code.&lt;/li>
&lt;li>Prefer job clusters; auto-terminate.&lt;/li>
&lt;li>Vacuum Delta tables; use optimize + z-order.&lt;/li>
&lt;li>Allow schema evolution only when intentional.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="environmentaware-medallion-naming">
 Environment‑Aware Medallion Naming
 &lt;a class="anchor" href="#environmentaware-medallion-naming">#&lt;/a>
&lt;/h2>
&lt;p>Unity Catalog is the governance backbone. Inconsistent names break access policies and automation. Use env prefixes, clear domains, and snake_case. cf. &lt;a href="https://learn.microsoft.com/azure/databricks/data-governance/unity-catalog/">Unity Catalog docs&lt;/a> .&lt;/p></description></item><item><title>Multi-module build based on sbt</title><link>https://non-neutralzero.github.io/notebook/posts/multimodulewithsbt/</link><pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate><guid>https://non-neutralzero.github.io/notebook/posts/multimodulewithsbt/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">import&lt;/span> &lt;span style="color:#8fbcbb">sbt.&lt;/span>&lt;span style="color:#81a1c1">{&lt;/span>&lt;span style="color:#8fbcbb">Compile&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span> &lt;span style="color:#8fbcbb">Test&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span> &lt;span style="color:#81a1c1">*}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">import&lt;/span> &lt;span style="color:#8fbcbb">Keys.&lt;/span>&lt;span style="color:#81a1c1">{&lt;/span>baseDirectory&lt;span style="color:#81a1c1">,&lt;/span> libraryDependencies&lt;span style="color:#81a1c1">,&lt;/span> &lt;span style="color:#81a1c1">*}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">// sbt.version = 1.6.2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">&lt;/span>&lt;span style="color:#8fbcbb">ThisBuild&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> trackInternalDependencies &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#8fbcbb">TrackLevel&lt;/span>&lt;span style="color:#81a1c1">.&lt;/span>&lt;span style="color:#8fbcbb">TrackIfMissing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">lazy&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> welcome &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> taskKey&lt;span style="color:#81a1c1">[&lt;/span>&lt;span style="color:#81a1c1">Unit&lt;/span>&lt;span style="color:#81a1c1">](&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;welcome&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> sparkVersion &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;2.4.0-cdh6.2.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> hiveVersion &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;2.1.1-cdh6.2.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">lazy&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> commonSettings &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#8fbcbb">Seq&lt;/span>&lt;span style="color:#81a1c1">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#616e87;font-style:italic">//organization := &amp;#34;com.nnz&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">&lt;/span> version &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;0.1.0-SNAPSHOT&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> welcome &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#81a1c1">{&lt;/span> println&lt;span style="color:#81a1c1">(&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;Welcome !&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">)},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scalaVersion &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;2.11.12&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> javacOptions &lt;span style="color:#81a1c1">++=&lt;/span> &lt;span style="color:#8fbcbb">Seq&lt;/span>&lt;span style="color:#81a1c1">(&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;-source&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;15.0.10&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;-target&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;15.0.10&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libraryDependencies &lt;span style="color:#81a1c1">++=&lt;/span> sparkDependencies&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resolvers &lt;span style="color:#81a1c1">++=&lt;/span> &lt;span style="color:#8fbcbb">Seq&lt;/span>&lt;span style="color:#81a1c1">(&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;Cloudera Versions&amp;#34;&lt;/span> at &lt;span style="color:#a3be8c">&amp;#34;https://repository.cloudera.com/artifactory/cloudera-repos/&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">lazy&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> root &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#81a1c1">(&lt;/span>project in file&lt;span style="color:#81a1c1">(&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;.&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">.&lt;/span>settings&lt;span style="color:#81a1c1">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;multimodule-project&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commonSettings&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> update &lt;span style="color:#81a1c1">/&lt;/span> aggregate &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">true&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">.&lt;/span>aggregate&lt;span style="color:#81a1c1">(&lt;/span>warehouse&lt;span style="color:#81a1c1">,&lt;/span> ingestion&lt;span style="color:#81a1c1">,&lt;/span> processing&lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">lazy&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> warehouse &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#81a1c1">(&lt;/span>project in file&lt;span style="color:#81a1c1">(&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;warehouse&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">.&lt;/span>settings&lt;span style="color:#81a1c1">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;warehouse&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commonSettings&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8fbcbb">Compile&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> scalaSource &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> baseDirectory&lt;span style="color:#81a1c1">.&lt;/span>value &lt;span style="color:#81a1c1">/&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;src&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;main&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;scala&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8fbcbb">Test&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> scalaSource &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> baseDirectory&lt;span style="color:#81a1c1">.&lt;/span>value &lt;span style="color:#81a1c1">/&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;src&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;test&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;scala&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">lazy&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> ingestion &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#81a1c1">(&lt;/span>project in file&lt;span style="color:#81a1c1">(&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;ingestion&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">.&lt;/span>dependsOn&lt;span style="color:#81a1c1">(&lt;/span>warehouse&lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">.&lt;/span>settings&lt;span style="color:#81a1c1">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;ingestion&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commonSettings&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8fbcbb">Compile&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> scalaSource &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> baseDirectory&lt;span style="color:#81a1c1">.&lt;/span>value &lt;span style="color:#81a1c1">/&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;src&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;main&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;scala&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8fbcbb">Test&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> scalaSource &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> baseDirectory&lt;span style="color:#81a1c1">.&lt;/span>value &lt;span style="color:#81a1c1">/&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;src&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;test&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;scala&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">lazy&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> processing &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#81a1c1">(&lt;/span>project in file&lt;span style="color:#81a1c1">(&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;processing&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">.&lt;/span>dependsOn&lt;span style="color:#81a1c1">(&lt;/span>warehouse&lt;span style="color:#81a1c1">,&lt;/span> ingestion&lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">.&lt;/span>settings&lt;span style="color:#81a1c1">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;processing&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commonSettings&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8fbcbb">Compile&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> scalaSource &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> baseDirectory&lt;span style="color:#81a1c1">.&lt;/span>value &lt;span style="color:#81a1c1">/&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;src&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;main&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;scala&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8fbcbb">Test&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> scalaSource &lt;span style="color:#81a1c1;font-weight:bold">:&lt;/span>&lt;span style="color:#81a1c1">=&lt;/span> baseDirectory&lt;span style="color:#81a1c1">.&lt;/span>value &lt;span style="color:#81a1c1">/&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;src&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;test&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;scala&amp;#34;&lt;/span>&lt;span style="color:#81a1c1">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic"> * Spark Dependencies
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> sparkCore &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;org.apache.spark&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">%%&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;spark-core&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">%&lt;/span> sparkVersion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> sparkSQL &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;org.apache.spark&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">%%&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;spark-sql&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">%&lt;/span> sparkVersion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> sparkHive &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;org.apache.spark&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">%%&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;spark-hive&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">%&lt;/span> sparkVersion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">lazy&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">val&lt;/span> sparkDependencies &lt;span style="color:#81a1c1;font-weight:bold">=&lt;/span> &lt;span style="color:#8fbcbb">Seq&lt;/span>&lt;span style="color:#81a1c1">(&lt;/span>sparkCore&lt;span style="color:#81a1c1">,&lt;/span> sparkSQL&lt;span style="color:#81a1c1">,&lt;/span> sparkHive&lt;span style="color:#81a1c1">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://gist.github.com/Non-NeutralZero/d5be154ee38962176bcc0bf49182c691">https://gist.github.com/Non-NeutralZero/d5be154ee38962176bcc0bf49182c691&lt;/a>&lt;/p></description></item><item><title>Building a website using Hugo and Hosting it on GitHub Pages</title><link>https://non-neutralzero.github.io/notebook/posts/hugo-website/</link><pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate><guid>https://non-neutralzero.github.io/notebook/posts/hugo-website/</guid><description>&lt;h2 id="installations">
 Installations
 &lt;a class="anchor" href="#installations">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Install Git - &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">Link&lt;/a>&lt;/li>
&lt;li>Install Hugo - &lt;a href="https://gohugo.io/installation/">Link&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="configuration">
 Configuration
 &lt;a class="anchor" href="#configuration">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>To create a new Hugo website, run:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new site mynewsite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>then cd to the directory&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1">cd&lt;/span> mynewsite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Initialize the site as a git repository&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Choose the &lt;a href="https://themes.gohugo.io/">hugo theme&lt;/a> that suits you.
&lt;blockquote class="book-hint info">
 Hugo offer a selection of themes developed by the community. This site for example was built using &lt;a href="https://github.com/alex-shpak/hugo-book">Hugo-Book&lt;/a>.
&lt;/blockquote>
&lt;/li>
&lt;li>Add the theme as a submodule&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic"># For example:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Add the theme to your site configuration file&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic"># Could be config.toml OR config.yaml OR hugo.toml OR hugo.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1">echo&lt;/span> &lt;span style="color:#a3be8c">&amp;#34;theme = &amp;#39;hugo-book&amp;#39;&amp;#34;&lt;/span> &amp;gt;&amp;gt; config.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>You will be able to see a first version of your website locally by running:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo server --minify 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Edit your configuration file&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>baseURL &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#39;http://example.org/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>languageCode &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#39;en-us&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#39;My New Hugo Site&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote class="book-hint warning">
 &lt;strong>Theme ConfigurationGuidelines&lt;/strong>&lt;br>
Themes&amp;rsquo; publishers offer guidelines to configure your webiste in accordance to the theme. Check your theme publisher page on &lt;a href="https://themes.gohugo.io/">hugo themes&lt;/a> or their theme github repo for guidance and help.
&lt;/blockquote>

&lt;h2 id="hosting-on-github-pages">
 Hosting on Github Pages
 &lt;a class="anchor" href="#hosting-on-github-pages">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>On your project settings, go to Pages. You&amp;rsquo;ll be able to see your site&amp;rsquo;s link.&lt;/li>
&lt;li>Choose a Build and deployment source (Github actions OR deploy from branch).&lt;/li>
&lt;li>You can also choose to publish it on a custom domain.&lt;/li>
&lt;li>Edit your configuration file&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>baseURL &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#39;https://username.github.io/repository&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>languageCode &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#39;en-us&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#39;My New Hugo Site&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>theme &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#a3be8c">&amp;#39;hugo-book&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="other-great-tools-for-building-static-websites">
 Other Great Tools For Building Static Websites
 &lt;a class="anchor" href="#other-great-tools-for-building-static-websites">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Sphinx &lt;a href="https://www.sphinx-doc.org/en/master/index.html">https://www.sphinx-doc.org/en/master/index.html&lt;/a>&lt;/li>
&lt;li>VuePress &lt;a href="https://vuepress.vuejs.org/">https://vuepress.vuejs.org/&lt;/a>&lt;/li>
&lt;li>Read the docs &lt;a href="https://about.readthedocs.com/features/">https://about.readthedocs.com/features/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Prompt Engineering</title><link>https://non-neutralzero.github.io/notebook/posts/prompt-engineering/</link><pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate><guid>https://non-neutralzero.github.io/notebook/posts/prompt-engineering/</guid><description>&lt;h2 id="rag-architecture">
 RAG Architecture
 &lt;a class="anchor" href="#rag-architecture">#&lt;/a>
&lt;/h2>
&lt;figure>&lt;img src="https://non-neutralzero.github.io/notebook/docs/images/posts/prompt-engineering/rag-architecture.jpg">
&lt;/figure></description></item><item><title>Running PySpark &amp; Jupyter With Docker</title><link>https://non-neutralzero.github.io/notebook/posts/pyspark-jupyter-docker/</link><pubDate>Thu, 08 Jun 2023 00:00:00 +0000</pubDate><guid>https://non-neutralzero.github.io/notebook/posts/pyspark-jupyter-docker/</guid><description>&lt;p>Thanks to the Jupyter community, it&amp;rsquo;s now much easier to run PySpark on Jupyter using Docker.
There are two ways you can do this : 1. the &amp;ldquo;direct&amp;rdquo; way and 2. the customized way.&lt;/p>
&lt;h2 id="the-direct-way">
 The &amp;ldquo;direct&amp;rdquo; way
 &lt;a class="anchor" href="#the-direct-way">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>verify your local settings are aligned with the pre-requisites to run this container, grosso modo
make sure docker is installed, of course !
&lt;blockquote class="book-hint info">
 You have to have about 4 GB of free space
&lt;/blockquote>
&lt;/p></description></item><item><title>How to document your code?</title><link>https://non-neutralzero.github.io/notebook/posts/code-documentation-scala/</link><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid>https://non-neutralzero.github.io/notebook/posts/code-documentation-scala/</guid><description>&lt;h2 id="comment-documenter-">
 Comment documenter ?
 &lt;a class="anchor" href="#comment-documenter-">#&lt;/a>
&lt;/h2>
&lt;p>Les mêmes principes et critères d’un bon code devraient s’appliquer à la documentation:&lt;/p>
&lt;ul>
&lt;li>Conventionnelle&lt;/li>
&lt;li>Simple&lt;/li>
&lt;li>Facile à comprendre&lt;/li>
&lt;/ul>
&lt;p>En plus des critères d’un bon code, une bonne documentation devrait aussi être:&lt;/p>
&lt;ul>
&lt;li>Explicative (intention du code, règles métiers, clarification du code, mise en garde sur les conséquences d’une mauvaise
utilisation, indications pour le testing)&lt;/li>
&lt;li>Non-redondante&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">* Returns the temperature.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>int get_temperature&lt;span style="color:#81a1c1">(&lt;/span>void&lt;span style="color:#81a1c1">)&lt;/span> &lt;span style="color:#81a1c1">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">return&lt;/span> temperature&lt;span style="color:#81a1c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Non-bruitée&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">* Always returns true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public boolean isAvailable&lt;span style="color:#81a1c1">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1">{&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">return&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">false&lt;/span>&lt;span style="color:#81a1c1">;}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="bonnes-pratiques">
 Bonnes pratiques
 &lt;a class="anchor" href="#bonnes-pratiques">#&lt;/a>
&lt;/h2>
&lt;h3 id="introduire-son-code">
 Introduire son code.
 &lt;a class="anchor" href="#introduire-son-code">#&lt;/a>
&lt;/h3>
&lt;p>Décrire le contexte ou le background du code est une bonne pratique qui permettra aux lecteurs de se positionner par
rapport aux conditions dans lesquelles le code a été généré et à ses objectifs.&lt;/p></description></item></channel></rss>